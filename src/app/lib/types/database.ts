import { Document, Types } from 'mongoose';

/**
 * IUser describes the shape of a user document in the application.
 * It extends Mongoose's `Document` to include Mongoose-specific fields
 * while providing a typed surface for application code.
 */
export interface IUser extends Document {
  /** The user's primary wallet address (unique) */
  walletAddress: string;

  /** Optional display name */
  username: string;

  /** Optional email */
  email: string;

  /** Optional password */
  password: string;

  /** User-specific settings */
  settings: {
    theme: string;
    notifications: boolean;
  };

  /** References to groups the user belongs to */
  groups: Types.ObjectId[];

  /** Creation timestamp */
  createdAt: Date;

  /** Last login timestamp */
  lastLogin: Date;
}

/**
 * Represents a member entry inside a group. Members are stored with their
 * wallet address and optional role metadata.
 */
export interface IGroupMember {
  /** Member wallet address (unique identifier for the member) */
  walletAddress: string;

  /** Role of the member within the group */
  role: 'admin' | 'member';

  /** When the member joined the group */
  joinedAt: Date;
}

/**
 * IGroup describes the shape of a group document used by the app.
 */
export interface IGroup {
  /** Optional string id (e.g. ObjectId.toString()) */
  id?: string;

  /** The display name of the group */
  name: string;

  /** Optional longer description */
  description?: string;

  /** Wallet address of the user who created the group */
  createdBy: string;

  /** Array of members (wallet addresses or member objects) */
  members: IGroupMember[];

  /** Permissions flags for the group */
  permissions: {
    canInvite: boolean;
    canPost: boolean;
  };

  /** Group-level settings */
  settings: {
    isPublic: boolean;
    requiresApproval: boolean;
  };

  /** Creation timestamp (may be added by the DB) */
  createdAt?: Date;

  /** Last update timestamp (may be added/updated by the DB) */
  updatedAt?: Date;
}


/**
 * A small repository interface used by data access layers.
 *
 * T represents the document type the repository operates on. Methods
 * accept generic filter shapes (`Record<string, unknown>`) and return
 * typed results to keep usages ergonomic while avoiding `any`.
 */
export interface Repository<T> {
  /** Find a document by its string id (typically ObjectId.toString()) */
  findById(id: string): Promise<T | null>;

  /**
   * Find a single document by a field name and value.
   * `field` is constrained to keys of T (as strings) to help callers.
   */
  findByField(field: keyof T & string, value: unknown): Promise<T | null>;

  /** Find all documents matching an optional query object */
  findAll(query?: Record<string, unknown>): Promise<T[]>;

  /** Create a new document. Omit fields normally generated by the DB */
  create(data: Omit<T, 'id' | 'createdAt'>): Promise<T>;

  /** Update a document by id. Returns the updated document or null */
  update(id: string, data: Partial<T>): Promise<T | null>;

  /** Delete a document by id */
  delete(id: string): Promise<boolean>;

  /** Upsert a document matching the filter */
  upsert(filter: Record<string, unknown>, data: Partial<T>): Promise<T>;
}